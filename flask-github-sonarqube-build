pipeline {
  agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }

  environment {
    DOCKER_HUB_REPO = "sanielsand/python-flask"
    CONTAINER_NAME = "flask-hello-world"
    SCANNER_HOME = tool 'sonarqube-scanner'

  }


    stages {
      stage('Checkout') {
        steps {
          checkout([$class: 'GitSCM', branches: [
            [name: '*/main']
          ], extensions: [], userRemoteConfigs: [
            [url: 'https://github.com/sanielsand27/Project-Flask.git']
          ]])
        }
      }
      stage("Sonarqube Analysis") {
        steps {
            withSonarQubeEnv('SonarQube-Server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Youtube-CICD \
                    -Dsonar.projectKey=Youtube-CICD'''
                }
            }
      }
      stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'SonarQube-Token'
                }
            }
        }
      stage('Build') {
        steps {
          echo 'Building..'
          sh 'docker image build -t $DOCKER_HUB_REPO:latest .'
        }
      }

      stage('Deploy') {
        steps {
          echo 'Deploying....'
          sh 'docker stop $CONTAINER_NAME || true'
          sh 'docker rm $CONTAINER_NAME || true'
          sh 'docker run -d -p 5000:5000 --name $CONTAINER_NAME $DOCKER_HUB_REPO'
        }
      }
    }
  }
